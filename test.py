import Vector2D 
from graphics import *

#	You may add more function that Find the Midpoint, Distance or Slope. As you learn about Cartesian Coordinate System. 
def add(v1, v2): 
    return v1[0] + v2[0], v1[1] + v2[1]

def translate(translation, vectors):
    return [add(translation, v) for v in vectors]


#	variables to plot below examples
dino_vector = ([6, 4], [3,1], [1, 2], [-1, 5], [-2, 5], [-3, 4], [-4, 4], [-5, 3], [-5, 2], [-2, 2], [-5, 1], [-4, 0], [-2, 1], [-1, 0], [1, -2], [0, -3], [-1, -4], [1, -4], [2, -3], [3, -1], [5, 1], [6, 4]) 
translations = [[12*x, 10*y] for x in range(-5,5) for y in range(-5,5)]



# Example 1: minimize()

# demo1 = Vector2D.Vector2D(minimize=(2,2))	# One point is considered two vartical and horizontal units.Default is (1,1)
# demo1.Grid()
# demo1.Origin()	# You need to call this method to draw points and lines
# d = demo1.Points([2,2])	# reduced by half
# demo1.Connect_points(d)
# demo1.getmouse()




# Example 2: simple 2D character

# demo2 = Vector2D.Vector2D(squares=(20,20))	# 20 by 20 squares on (x, y).Default is (4,4)
# demo2.Grid()	
# demo2.Origin(1,0)	# Add one unit on Origin Point X. 

# a = demo2.Points(*dino_vector)#dino 1
# demo2.Connect_points(a)

# b = demo2.Points(*[add((-4.5,-3.5), v) for v in dino_vector])		# Move the original points by adding (-4.5,-3.5) 
# demo2.Connect_points(b, 'blue')	# Set the line color 'blue'

# demo2.getmouse()





# Example 3: Using additional functions

# Using colors: simple color names available 
# Or use custom color by color_rgb(r, g, b)
# To use color_rgb() do from graphics import color_rgb

# Background = c1
# Lines = c2
# Points = c3


# c1 = color_rgb(0, 25, 50)
# c2 = 'cyan'
# c3 = 'black'

# demo3 = Vector2D.Vector2D(squares=(150, 150), color=(c1, c2, c3))
# demo3.Origin()
# for i in translations:

# 	dinos = translate(i, dino_vector)
# 	a = demo3.Points(*dinos)
# 	demo3.Connect_points(a, 'red')

# demo3.getmouse()


# There are 6 methods on this class.
# Vector2D.grid()		optional. use it to visualize where your point is.
# Vector2D.Origin()		origin point(0,0). this function is require before draw points and lines.
# Vector2D.Points()		return a list which Connect_points() function can use it.
# Vector2D.Connect_points(list)		connect the points that plot on the graph. NOTE: You cannot directly put coordinate. Pass the list generated by Points() is use to draw lines.
# Vector2D.getmouse()	wait for user click and return the clicked coordinate.
# Vector2D.close()		close the window
